<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plusice</title>
    <atom:link href="http://blog.plusicec.com/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://blog.plusicec.com/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Sat, 15 Aug 2015 20:12:44 +0800</pubDate>
    
      <item>
        <title>CORS  options请求</title>
        <link>http://blog.plusicec.com/2015/08/15/cors%E8%B7%A8%E5%9F%9Foptions%E8%AF%B7%E6%B1%82.html</link>
        <guid isPermaLink="true">http://blog.plusicec.com/2015/08/15/cors%E8%B7%A8%E5%9F%9Foptions%E8%AF%B7%E6%B1%82.html</guid>
        <description>&lt;p&gt;      终于找到时间（不偷懒）来填三个星期前挖的坑了，虽然不是什么干货，但是通过写写文章，也可以增强自己的语言组织能力，这点对程序员后面的发展也是至关重要的。切入正题，这次记录以下我用cors跨域时失败的问题（不涉及cookie跨域）。&lt;/p&gt;

&lt;p&gt;      前两周和一个后端在集成接口，因为前端代码在我本地，后端接口在他机子上，所以让他设置cors让我可以跨域访问。然而，结果却老是得到一个404请求，查看请求信息发现是发了一个options请求，而本来的请求都没有发出去。我当时就纳闷了，自己之前用nodejs试过后端Access-Control-Allow-Origin就行啦，为何这次就不行。然后试着用原生的ajax请求和jquery请求都可以哇。&lt;/p&gt;

&lt;p&gt;      google了些许时间后才发现问题，我前端使用angualr写的，其他人的认证模块在请求里插入了自定义的头域，而这是cors请求出现options预请求的其中一种情况，当出现以下一种情况就会发出预请求（其他情况和正常请求一样）：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;请求以 GET, HEAD 或者 POST 以外的方法发起请求。或者，使用 POST，但请求数据为 application/x-www-form-urlencoded, multipart/form-data 或者 text/plain 以外的数据类型。比如说，用 POST 发送数据类型为 application/xml 或者 text/xml 的 XML 数据的请求。&lt;/li&gt;
    &lt;li&gt;使用自定义请求头（比如添加诸如 X-PINGOTHER）。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;提示：从Gecko 2.0开始，text/plain, application/x-www-form-urlencoded 和 multipart/form-data 类型的数据都可以直接用于跨站请求，而不需要先发起“预请求”了。之前，只有 text/plain 可以不用先发起“预请求”，进行跨站请求。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;      找到发起options请求的原因了，那为什么会404呢，原因也是非常简单，后端没处理。。。所以其实一切的一切都不是前端的问题，想允许跨域，后端对原始请求设置Access-Control-Allow-Origin响应头，对其预请求——options请求进行响应，并对options请求添加相关响应头即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: ＊                      // 允许跨域的域名
Access-Control-Allow-Methods: POST, GET, OPTIONS     // 允许跨域的方法
Access-Control-Allow-Headers: X-PINGOTHER            // 允许跨域的自定义头域
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;      最后附上nginx对options请求的响应处理，因为nginx好像默认不支持options请求，可以这么做（其实用if是不太好的）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
	if ($request_method = OPTIONS ) {
		add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;
		add_header &#39;Access-Control-Allow-Methods&#39; &#39;POST, GET, OPTIONS&#39;;
		add_header &#39;Access-Control-Allow-Headers&#39; &#39;X-PINGOTHER&#39;;
		return 200;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考链接：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&quot;&gt;点击跳转&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 00:00:00 +0800</pubDate>
      </item>
    
      <item>
        <title>sass入门使用总结</title>
        <link>http://blog.plusicec.com/2015/07/29/sass%E5%88%9D%E8%AF%95.html</link>
        <guid isPermaLink="true">http://blog.plusicec.com/2015/07/29/sass%E5%88%9D%E8%AF%95.html</guid>
        <description>&lt;p&gt;      虽然sass出了很久了，但一直没有使用，因为在前公司没有使用编译工具，只有自己使用的话会怕导致不好维护（其实也是懒的借口）。&lt;/p&gt;

&lt;p&gt;      最近公司的一个小项目，我开始了sass的使用。其实一开始用sass，我也是拒绝的，因为没有使用过，而项目稍微有点紧，怕不熟悉而影响进度。好吧，说来也惭愧，前端入坑已几年，竟然还没有用过这东西，哭！然而！使用之后duangduang的却发现，这玩意上手简直及其简单，可能也是我只是使用了比较简单的功能吧。之前试用过less，感觉还是又挺多东西要记的。话不多扯，下面自我总结一番sass的基本用法：&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1.嵌套&lt;/h3&gt;
&lt;p&gt;      有两种嵌套，一种是选择器嵌套，一种是属性嵌套&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;选择器嵌套：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.parent {
    width: 100px;
    .sub {
        color: #fff;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;选择器嵌套：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;div {
    border {
        style: solid;
        color: #fff;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;      个人觉得选择器嵌套可以少用，因为css选择器层级过多会影响解析速度。类似上面的嵌套，可以直接写一个parent-sub的类名，直接为该类名指定样式。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2.变量&lt;/h3&gt;
&lt;p&gt;      用$符号，可以将某个值声明为一个变量，例如在一个网站中，可以把主题颜色设置成一个变量，主题需要更换的时候只需更改变量，无需更改所有用到主题颜色的元素。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$theme-color: #0f0;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-4&quot;&gt;3.计算&lt;/h3&gt;
&lt;p&gt;      可能某个元素的宽度要依赖于另外一个来计算，就可以用这个功能啦&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
     width: 2*2px;
     height: 2+$var;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-5&quot;&gt;4.继承&lt;/h3&gt;
&lt;p&gt;      对于某些有部分类似样式的选择器来说是很有用的。subclass继承了class：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class {
     color: #000;
}
.subclass {
     @extend .class;
     width: 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;mixin&quot;&gt;5.Mixin&lt;/h3&gt;
&lt;p&gt;      类似于函数功能，可以将一段样式封装起来，甚至可以传参数，然后用@include引入。这个相当有用哇，例如可以定义一个按钮，把color，border-radius，width，padding的值都当作参数传入，这样 写的时候只要写Mixin和参数值的引用就行了。而且参数支持缺省值哦，相当于函数的默认参数值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@mixin test($value:10px) {
     width: $value;
     height: 10px;
}
div {
     @include test(20px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;compass&quot;&gt;6.配合compass使用&lt;/h3&gt;
&lt;p&gt;      compass是使用sass的一个工具，在sass的基础上，封装了一系列有用的模块模板，你也可以使用compass来批量处理sass文件，监听文件更改。使用compass可以让你使用很多预定义好的Mixin，会有助于提高编写效率。例如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div {
    -webkit-animation: test;
    -moz-animation: test;
    animation: test;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;      引入compass/animation后可以写成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div {
    @include animation(test);       
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-6&quot;&gt;好好学习，天天向上，不要惧怕使用新的东西。&lt;/h4&gt;

</description>
        <pubDate>Wed, 29 Jul 2015 00:00:00 +0800</pubDate>
      </item>
    
      <item>
        <title>开篇——跳槽之路</title>
        <link>http://blog.plusicec.com/2015/03/15/first-post.html</link>
        <guid isPermaLink="true">http://blog.plusicec.com/2015/03/15/first-post.html</guid>
        <description>&lt;p&gt;      最近在忙着找下家，才知道了自己技术的匮乏。去年试了一下用jekyll在github pages写博客，但是一直没装扮好，现在倒是想抽空弄了一下。可惜windows下安装ruby实在蛋疼，只能复制了一个主题放了上去，这倒促使我想买mbp了。&lt;/p&gt;

&lt;p&gt;2015-03-16&lt;br /&gt;
      今天得知投某易简历被拒了，mark一下。。。&lt;/p&gt;

&lt;p&gt;2015-03-18&lt;br /&gt;
      昨天下班回来竟然发现电脑坏了，开机都开不了。下楼买了一把螺丝刀，但可惜手机查方法有些麻烦，最后没能把笔记本拆开，因为不想浪费时间，今天只能跑去岗顶拿钱给别人赚了。昨晚因为这个还使得心情很差，一度很沮丧，本来回来想投下简历看下资料的，搞得都没干成。&lt;br /&gt;
      看来自己承受挫折的能力还是太差了。最近找下家也使得自己有些不自信，但真心找不到让自己自信的点，只能怪自己之前不够努力。有些迷茫，都有了想考公务员的想法，但不确定自己是否真的适合，最终还是放弃了这个想法。总之，自己选择的路，跪着也要把它走完吧。&lt;/p&gt;

&lt;p&gt;2015-03-22&lt;br /&gt;
      又一周过去了，这周什么收获都没，上周怎么说也面试了两次，拿到一个offer，这周只投了一次简历，学习计划也还没完成。也是因为这周运气不好吧，周二电脑坏了一次，今天电脑又坏了，早上去跟同事借了u盘想重装系统，才发现原来不是系统问题，只能再拿去岗顶。一天又这么没了。唯一高兴的一点是今天刚好有同学去香港，已经帮我把mbp买到了。接下来，继续学习，继续加油！&lt;/p&gt;

&lt;p&gt;2015-04-02&lt;br /&gt;
      虽然没有找到理想的工作，但还是接受第二个offer吧，不想再拖下去了，定下来，好好干，不一定得是大公司才能学到东西，现在就更多大靠自己吧。&lt;br /&gt;
      到现在为止，面试了3家，除了第一次面试某易状态不好挂掉外，拿到两个offer。但是投了好几个简历都没有消息，很受伤啊。。&lt;br /&gt;
      现在总算把工作定下来，mbp也到手了，接下来要好好学习，记住这次跳槽所经历的鄙视。&lt;/p&gt;

&lt;p&gt;      周末清明假期，和妹子去珠海澳门调整一下，回来努力工作学习！！&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Mar 2015 00:00:00 +0800</pubDate>
      </item>
    
  </channel>
</rss>
